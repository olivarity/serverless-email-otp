service: serverless-email-otp
frameworkVersion: '3'

plugins:
  - serverless-s3-sync

custom:
  secrets: ${file(secrets.json)}
  s3Sync:
    - bucketName: serverless-email-otp-assets
      localDir: web/build

provider:
  name: aws
  runtime: nodejs14.x
  httpApi:
    authorizers:
      lambdaAuthorizer:
        type: request
        functionName: validateToken
        identitySource: $request.header.Authorization
  environment:
    DYNAMODB_TABLE: ${self:service}-userTable-${sls:stage}
    SENDER_ADDRESS: no-reply@scaasic.com
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-userTable-${sls:stage}
        - Effect: 'Allow'
          Action: 
            - 'ses:SendEmail'
          Resource: '*'

package:
  patterns:
    - '!web'

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get
          authorizer: 
            name: lambdaAuthorizer
  sendEmail:
    handler: functions/auth.sendEmail
    events:
      - httpApi:
          path: /auth/login
          method: post
  validateCode:
    handler: functions/auth.validateCode
    events:
      - httpApi:
          path: /auth/login/challenge
          method: post
  validateToken:
    handler: functions/auth.validateToken

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        TableName: ${self:service}-userTable-${sls:stage}
    AssetBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverless-email-otp-assets
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AssetBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "AssetBucket"
                    },
                    "/*"
                  ]
                ]